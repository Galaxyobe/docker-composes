version: "3.7"

volumes:
  postgres_data:
    name: ${POSTGRES_DATA:-postgres_data}
    external: ${POSTGRES_DATA_EXTERNAL:-false}
  kong_log:
    name: ${KONG_LOG:-kong_log}
    external: ${KONG_LOG_EXTERNAL:-false}

networks:
  kong-net:
    name: ${KONG_NET:-kong-net}
    external: false

services:
  db:
    image: "${POSTGRES_DOCKER_TAG:-postgres:9.6}"
    container_name: ${POSTGRES_CONTAINER_NAME:-postgres}
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kong}
      POSTGRES_USER: ${POSTGRES_USER:-kong}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kong}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - postgres_data:/var/lib/postgresql/data

  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    depends_on:
      - db
    environment:
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_PREFIX: ${KONG_PREFIX:-/usr/local/kong}
      KONG_LOG_LEVEL: ${KONG_LOG_LEVEL:-notice}
      KONG_ADMIN_ACCESS_LOG: ${KONG_ADMIN_ACCESS_LOG:-/dev/stdout}
      KONG_ADMIN_ERROR_LOG: ${KONG_ADMIN_ERROR_LOG:-/dev/stderr}
      KONG_PROXY_ACCESS_LOG: ${KONG_PROXY_ACCESS_LOG:-/dev/stdout}
      KONG_PROXY_ERROR_LOG: ${KONG_PROXY_ERROR_LOG:-/dev/stderr}
    networks:
      - kong-net
    # volumes:
    #   - kong_log: ${KONG_LOG:-/usr/local/kong/log}
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  konga-prepare:
    image: "${KONGA_DOCKER_TAG:-pantsel/konga:next}"
    command: "-c prepare -a postgres -u postgresql://${KONG_PG_USER:-kong}:${KONG_PG_PASSWORD:-kong}@db:5432/${KONGA_PG_DATABASE:-konga}"
    networks:
      - kong-net
    restart: on-failure
    links:
      - db
    depends_on:
      - db

  konga:
    image: "${KONGA_DOCKER_TAG:-pantsel/konga:next}"
    container_name: konga
    restart: always
    networks:
      - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: db
      DB_DATABASE: ${KONGA_PG_DATABASE:-konga}
      DB_USER: ${KONGA_PG_USER:-kong}
      DB_PASSWORD: ${KONGA_PG_PASSWORD:-kong}
      TOKEN_SECRET: ${KONGA_TOKEN_SECRET:-km2GUr4RkcQD7DewhJPNXrCuZwcKmqjb}
      NODE_ENV: ${KONGA_NODE_ENV:-production}
    links:
      - db
    depends_on:
      - db
    ports:
      - "${KONGA_PORT:-0.0.0.0:1337}:1337"
